name: Build and Deploy Hugo Blog

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose an environment to deploy to: <staging|production>"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  HUGO_VERSION: "0.148.1"
  NODE_VERSION: "20"
  GO_VERSION: "1.21"

jobs:
  # 1. 构建作业
  build:
    runs-on: ubuntu-latest
    name: Build Hugo Site
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: Install Dependencies & Build
        # 在生产构建时，将 PRODUCTION_URL 环境变量传递给构建脚本
        run: |
          npm ci
          # Verify TailwindCSS v4 CLI installation - Hugo's css.TailwindCSS expects 'npx tailwindcss' to work
          echo "Checking TailwindCSS CLI installation..."
          if [ -f "node_modules/.bin/tailwindcss" ]; then
            echo "✅ TailwindCSS CLI found: $(ls -la node_modules/.bin/tailwindcss)"
            echo "Testing npx tailwindcss..."
            npx tailwindcss --version
          elif [ -f "node_modules/@tailwindcss/cli/dist/index.mjs" ]; then
            echo "📝 TailwindCSS v4 CLI package found, creating symlink..."
            ln -sf ../@tailwindcss/cli/dist/index.mjs node_modules/.bin/tailwindcss
            echo "✅ Created symlink: $(ls -la node_modules/.bin/tailwindcss)"
            npx tailwindcss --version
          else
            echo "❌ TailwindCSS CLI not found - checking installation..."
            echo "Installed packages:"
            ls -la node_modules/.bin/ | grep -i tailwind || echo "No tailwind binaries found"
            echo "Package contents:"
            ls -la node_modules/@tailwindcss/ 2>/dev/null || echo "No @tailwindcss directory"
            exit 1
          fi
          if [[ "${{ github.ref }}" == "refs/heads/main" || \
                ( "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.environment }}" == "production" ) ]]; then
            echo "Building for production..."
            PRODUCTION_URL=${{ vars.PRODUCTION_URL }} HUGO_ENV=production npm run build:production
          else
            echo "Building for staging/development..."
            HUGO_ENV=development npm run build:development
          fi

      - name: Validate build output
        run: npm run validate

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          # 使用 github.run_id 确保工件名称的唯一性，防止并发冲突
          name: hugo-build-${{ github.run_id }}
          path: public/
          retention-days: 7

  # 2. 部署到 Staging 的触发器
  deploy_staging:
    needs: build
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    uses: ./.github/workflows/reusable-deploy.yml
    with:
      environment_name: staging
      # ✅ FIX: Use vars context which is available in reusable workflow calls
      environment_url: ${{ vars.STAGING_URL }}
      artifact_name: hugo-build-${{ github.run_id }}
    secrets:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # 3. 部署到 Production 的触发器
  deploy_production:
    needs: build
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    uses: ./.github/workflows/reusable-deploy.yml
    with:
      environment_name: production
      # ✅ FIX: Use vars context which is available in reusable workflow calls
      environment_url: ${{ vars.PRODUCTION_URL }}
      artifact_name: hugo-build-${{ github.run_id }}
    secrets:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}